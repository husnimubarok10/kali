#!/system/bin/sh
# kali-control.sh
# Kontrol bootkali: start | stop | status
# Jika tidak ada argumen => start
# Tambah opsi -h/--help (Bahasa Indonesia)
# Tambah opsi -l "lokasi" untuk MNT (otomatis update bootkali_env)

# --- helper: resolve absolute path ---
_resolve_path() {
  if command -v readlink >/dev/null 2>&1 && readlink -f "$1" >/dev/null 2>&1; then
    readlink -f "$1"
  elif command -v realpath >/dev/null 2>&1; then
    realpath "$1"
  else
    _oldpwd=$(pwd 2>/dev/null)
    cd "$(dirname "$1")" 2>/dev/null || true
    _base=$(basename "$1")
    printf "%s/%s\n" "$(pwd -P 2>/dev/null || pwd)" "$_base"
    [ -n "$_oldpwd" ] && cd "$_oldpwd" 2>/dev/null || true
  fi
}

SCRIPT_PATH=$(_resolve_path "$0")
SCRIPT_DIR=$(dirname "$SCRIPT_PATH")
BOOT="$SCRIPT_DIR/bootkali"
KILL="$SCRIPT_DIR/killkali"
ENV_FILE="$SCRIPT_DIR/bootkali_env"

# Warna
GREEN="\033[0;32m"
RED="\033[0;31m"
YELLOW="\033[1;33m"
NC="\033[0m"

# Fungsi logging
_info() { printf "${YELLOW}%s${NC}\n" "$*"; }
_ok()   { printf "${GREEN}%s${NC}\n" "$*"; }
_err()  { printf "${RED}%s${NC}\n" "$*"; }

# Jalankan command pakai root
jalanin_root() {
  cmd="$1"
  if [ "$(id -u 2>/dev/null || echo 1)" = "0" ]; then
    sh -c "$cmd"
    return $?
  fi
  if command -v su >/dev/null 2>&1; then
    su -c "$cmd"
    return $?
  fi
  _err "ERROR: tidak ada akses root dan 'su' tidak tersedia."
  return 127
}

# --- Pastikan root dulu ---
if [ "$(id -u 2>/dev/null || echo 1)" != "0" ]; then
  if command -v su >/dev/null 2>&1; then
    _info "INFO: Script ini perlu dijalankan sebagai root. Mencoba 'su'..."
    su -c "sh '$SCRIPT_PATH' $*"
    RC=$?
    if [ "$RC" -eq 0 ]; then
      exit 0
    elif [ "$RC" -eq 127 ]; then
      _err "ERROR: 'su' tidak tersedia atau akses root ditolak."
      exit 127
    else
      exit $RC
    fi
  else
    _err "ERROR: 'su' tidak ditemukan. Tidak mendapatkan akses root."
    exit 127
  fi
fi

# --- Parsing argumen ---
aksi="start"
MNT_ARG=""

while [ $# -gt 0 ]; do
  case "$1" in
    -l)
      shift
      if [ -z "$1" ]; then
        _err "ERROR: opsi -l butuh nilai lokasi"
        exit 2
      fi
      MNT_ARG="$1"
      shift
      ;;
    start|b|boot|stop|k|kill|status|s|-h|--help)
      aksi="$1"
      shift
      ;;
    *)
      _err "Argumen tidak dikenali: $1"
      exit 2
      ;;
  esac
done

# Fungsi help
tampil_help() {
  printf "${YELLOW}kali-control.sh â€” kontrol bootkali/killkali\n${NC}"
  printf "Penggunaan:\n"
  printf "  %s [start|stop|status|b|k|s|-h|--help] [-l lokasi]\n\n" "$0"
  printf "Opsi:\n"
  printf "  start, b, boot      : Menjalankan Kali (bootkali)\n"
  printf "  stop, k, kill       : Menghentikan Kali (killkali)\n"
  printf "  status, s           : Cek status (apakah bootkali berjalan)\n"
  printf "  -l lokasi           : Tentukan path MNT (otomatis update bootkali_env)\n"
  printf "  -h, --help          : Tampilkan panduan ini\n\n"
  printf "Catatan:\n"
  printf "  - File bootkali, killkali, bootkali_env harus berada di folder yang sama dengan skrip ini\n"
  printf "  - Skrip ini otomatis mencoba 'su' jika dijalankan tanpa root\n"
}

# --- Update bootkali_env ---
update_bootkali_env() {
  local lokasi="$1"
  if [ ! -f "$ENV_FILE" ]; then
    _err "ERROR: $ENV_FILE tidak ditemukan."
    return 2
  fi





  if grep -q '^MNT=' "$ENV_FILE"; then
    jalanin_root "$KILL"
    RC=$?
    sed -i "s|^MNT=.*|MNT=\"$lokasi\"|" "$ENV_FILE"
  else
    echo "MNT=\"$lokasi\"" >> "$ENV_FILE"
  fi
  _ok "[OK] bootkali_env diperbarui: MNT=\"$lokasi\""
}

# --- Main ---
case "$aksi" in
  -h|--help)
    tampil_help
    exit 0
    ;;
  ""|start|b|boot)
    if [ ! -f "$BOOT" ] || [ ! -x "$BOOT" ]; then
      _err "ERROR: $BOOT tidak ada atau tidak bisa dieksekusi."
      exit 2
    fi
    _info "[INFO] Menjalankan Kali (bootkali) ..."
    if [ -n "$MNT_ARG" ]; then
      update_bootkali_env "$MNT_ARG"
    fi
    jalanin_root "$BOOT"
    RC=$?
    if [ $RC -eq 0 ]; then
      _ok "[OK] bootkali dieksekusi."
    else
      _err "[FAIL] bootkali exit code: $RC"
    fi
    exit $RC
    ;;
  stop|k|kill)
    if [ ! -f "$KILL" ] || [ ! -x "$KILL" ]; then
      _err "ERROR: $KILL tidak ada atau tidak bisa dieksekusi."
      exit 2
    fi
    _info "[INFO] Menghentikan Kali (killkali) ..."
    jalanin_root "$KILL"
    RC=$?
    if [ $RC -eq 0 ]; then
      _ok "[OK] killkali dieksekusi."
    else
      _err "[FAIL] killkali exit code: $RC"
    fi
    exit $RC
    ;;
  status|s)
    PID=$(pgrep -f "$BOOT" 2>/dev/null || true)
    if [ -n "$PID" ]; then
      UPTIME_SEC=$(ps -p "$PID" -o etimes= 2>/dev/null | tr -d ' ' || true)
      if [ -n "$UPTIME_SEC" ]; then
        HOURS=$((UPTIME_SEC/3600))
        MINUTES=$(( (UPTIME_SEC%3600)/60 ))
        SECONDS=$((UPTIME_SEC%60))
        _ok "[STATUS] Kali sedang BERJALAN"
        printf "${GREEN}PID       : %s${NC}\n" "$PID"
        printf "${GREEN}Uptime    : %dh %dm %ds${NC}\n" "$HOURS" "$MINUTES" "$SECONDS"
      else
        _ok "[STATUS] Kali sedang BERJALAN (PID: $PID)"
      fi
      exit 0
    else
      _err "[STATUS] Kali sedang MATI"
      exit 3
    fi
    ;;
  *)
    _err "Argumen tidak dikenali: $aksi"
    tampil_help
    exit 2
    ;;
esac